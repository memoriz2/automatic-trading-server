
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TradeLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  kimp: 'kimp',
  action: 'action',
  amount: 'amount',
  result: 'result'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  passwordHash: 'passwordHash',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImageUrl: 'profileImageUrl',
  password: 'password'
};

exports.Prisma.CryptocurrencyScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  upbitMarket: 'upbitMarket',
  binanceSymbol: 'binanceSymbol',
  priority: 'priority'
};

exports.Prisma.ExchangeScalarFieldEnum = {
  id: 'id',
  apiKey: 'apiKey',
  isActive: 'isActive',
  userId: 'userId',
  exchange: 'exchange',
  apiSecret: 'apiSecret',
  passphrase: 'passphrase',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KimchiPremiumScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  upbitPrice: 'upbitPrice',
  binancePrice: 'binancePrice',
  premiumRate: 'premiumRate',
  timestamp: 'timestamp',
  exchangeRate: 'exchangeRate',
  premiumAmount: 'premiumAmount'
};

exports.Prisma.PerformanceStatScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  totalTrades: 'totalTrades',
  successfulTrades: 'successfulTrades',
  dailyProfit: 'dailyProfit',
  dailyVolume: 'dailyVolume',
  winRate: 'winRate',
  avgProfitPerTrade: 'avgProfitPerTrade',
  maxDrawdown: 'maxDrawdown',
  createdAt: 'createdAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  strategyId: 'strategyId',
  symbol: 'symbol',
  type: 'type',
  entryPrice: 'entryPrice',
  currentPrice: 'currentPrice',
  quantity: 'quantity',
  entryPremiumRate: 'entryPremiumRate',
  currentPremiumRate: 'currentPremiumRate',
  status: 'status',
  entryTime: 'entryTime',
  exitTime: 'exitTime',
  upbitOrderId: 'upbitOrderId',
  binanceOrderId: 'binanceOrderId',
  side: 'side',
  exitPrice: 'exitPrice',
  exitPremiumRate: 'exitPremiumRate',
  unrealizedPnl: 'unrealizedPnl',
  realizedPnl: 'realizedPnl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  sid: 'sid',
  sess: 'sess',
  expire: 'expire'
};

exports.Prisma.SystemAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  userId: 'userId',
  data: 'data',
  priority: 'priority',
  createdAt: 'createdAt'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  positionId: 'positionId',
  symbol: 'symbol',
  side: 'side',
  exchange: 'exchange',
  quantity: 'quantity',
  price: 'price',
  fee: 'fee',
  orderType: 'orderType',
  exchangeOrderId: 'exchangeOrderId',
  exchangeTradeId: 'exchangeTradeId',
  executedAt: 'executedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TradingSettingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  entryPremiumRate: 'entryPremiumRate',
  exitPremiumRate: 'exitPremiumRate',
  stopLossRate: 'stopLossRate',
  maxPositions: 'maxPositions',
  isAutoTrading: 'isAutoTrading',
  maxInvestmentAmount: 'maxInvestmentAmount',
  kimchiEntryRate: 'kimchiEntryRate',
  kimchiExitRate: 'kimchiExitRate',
  kimchiToleranceRate: 'kimchiToleranceRate',
  binanceLeverage: 'binanceLeverage',
  upbitEntryAmount: 'upbitEntryAmount',
  dailyLossLimit: 'dailyLossLimit',
  maxPositionSize: 'maxPositionSize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradingStrategyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  entryRate: 'entryRate',
  exitRate: 'exitRate',
  leverage: 'leverage',
  investmentAmount: 'investmentAmount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  symbol: 'symbol',
  tolerance: 'tolerance',
  isAutoTrading: 'isAutoTrading',
  totalTrades: 'totalTrades',
  successfulTrades: 'successfulTrades',
  totalProfit: 'totalProfit'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  TradeLog: 'TradeLog',
  User: 'User',
  Cryptocurrency: 'Cryptocurrency',
  Exchange: 'Exchange',
  KimchiPremium: 'KimchiPremium',
  PerformanceStat: 'PerformanceStat',
  Position: 'Position',
  Session: 'Session',
  SystemAlert: 'SystemAlert',
  Trade: 'Trade',
  TradingSetting: 'TradingSetting',
  TradingStrategy: 'TradingStrategy'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
